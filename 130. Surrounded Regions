public class Solution {
    public void solve(char[][] board) {
        if(board.length==0) return;
        int row = board.length;
        int col = board[0].length;
        Queue<Point> queue = new LinkedList<Point>();
        
        for(int r = 0;r<row;r++){
            if(board[r][0]=='O'){
                board[r][0]='+';
                queue.add(new Point(r,0));
            }
            if(board[r][col-1]=='O'){
                board[r][col-1]='+';
                queue.add(new Point(r,col-1));
            }
        }
        
        for(int c = 0;c<col;c++){
            if(board[0][c]=='O'){
                board[0][c]='+';
                queue.add(new Point(0,c));
            }
            if(board[row-1][c]=='O'){
                board[row-1][c]='+';
                queue.add(new Point(row-1,c));
            }
        }
        
        while(!queue.isEmpty()){
            Point p = queue.poll();
            int rowN = p.x;
            int colN = p.y;
            if (rowN - 1 >= 0 && board[rowN-1][colN] == 'O') {board[rowN-1][colN] = '+'; queue.add(new Point(rowN-1, colN));}
        	if (rowN + 1 < row && board[rowN+1][colN] == 'O') {board[rowN+1][colN] = '+'; queue.add(new Point(rowN+1, colN));}
        	if (colN - 1 >= 0 && board[rowN][colN - 1] == 'O') {board[rowN][colN-1] = '+'; queue.add(new Point(rowN, colN-1));}
            if (colN + 1 < col && board[rowN][colN + 1] == 'O') {board[rowN][colN+1] = '+'; queue.add(new Point(rowN, colN+1));}   
        }
        
        for(int i =0;i<row;i++){
            for(int j =0;j<col;j++){
                if(board[i][j]=='O') board[i][j]='X';
                if(board[i][j]=='+') board[i][j]='O';
                
            }
        }
        
    }
}
