public class Solution {
    public ListNode detectCycle(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        while(fast!=null&&fast.next!=null){
            fast=fast.next.next;
            slow=slow.next;
            if(fast==slow){
                ListNode slow2=head;
            
                while(slow!=slow2){
                    slow2=slow2.next;
                    slow=slow.next;
                }
                return slow;
            }
        }
        return null;
    }
}

142. Linked List Cycle II

@lwen8989gmail.com 

Is this diagram help you understand?
When fast and slow meet at point p, the length they have run are 'a+2b+c' and 'a+b'.
Since the fast is 2 times faster than the slow. So a+2b+c == 2(a+b), then we get 'a==c'.
So when another slow2 pointer run from head to 'q', at the same time, previous slow pointer will run from 'p' to 'q',
so they meet at the pointer 'q' together.
