public class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        Map<Integer,Integer> inMap = new HashMap<Integer,Integer>();
        for(int i = 0;i<inorder.length;i++){
            inMap.put(inorder[i],i);
        }
        TreeNode root = buildTree(inorder,0,inorder.length-1,postorder,0,postorder.length-1,inMap);
        return root;
    }
    private TreeNode buildTree(int[] inorder,int inStart,int inEnd,int[] postorder,int postStart,int postEnd,Map<Integer,Integer> inMap){
        if(postStart>postEnd||inStart>inEnd) return null;
        
        TreeNode root = new TreeNode(postorder[postEnd]);
        int inRoot = inMap.get(root.val);
        root.left=buildTree(inorder,inStart,inRoot-1,postorder,postStart,postStart+inRoot-inStart-1,inMap);
        root.right=buildTree(inorder,inRoot+1,inEnd,postorder,postStart+inRoot-inStart,postEnd-1,inMap);
        return root;
    }
}
